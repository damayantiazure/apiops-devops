trigger:
  enabled: false
variables:
- name: resourceGroupName
  value: "CONTAPP-APIM-DEVOPS "
- name: location
  value: "eastus"
- name: APP_NAME
  value: "aegis"
- name: APP_ENV
  value: "dev"
- name: imageName
  value: "compliancewebapi"
- name: pipelinvalidationimage
  value: "pipelinevalidationapi"
- name: tag
  value: "$(Build.BuildId)"
- name: uamiName
  value: "$(APP_NAME)-uami-$(APP_ENV)"
- name: acaEnvName
  value: "$(APP_NAME)-appenv-$(APP_ENV)"
- name: appInsightName
  value: "$(APP_NAME)-appinsights-$(APP_ENV)"
- name: registry
  value: "$(APP_NAME)contregistry$(APP_ENV).azurecr.io"
- name: containerRegistryName
  value: "$(APP_NAME)contregistry$(APP_ENV)"
- name: imageRepository
  value: "compliancewebapi"
- name: ComplianceWebApi_Path
  value: "/src/WebApis/ComplianceWebApi/"
- name: dockerfilePath
  value: "src/WebApis/ComplianceWebApi/Dockerfile"
- name: labelblue
  value: "blue"
- name: labelgreen
  value: "green"
- name: apimServiceName
  value: "$(APP_NAME)apim$(APP_ENV)13"
- name: productName
  value: "$(APP_NAME)-product"
- name: apiName
  value: "$(APP_NAME)-api"
- name: apiVersion
  value: "v1-preview-$(tag)"
- name: apiRevision
  value: $(tag)
stages:
- stage: __default
  jobs:
  - job: Job
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: AzureCLI@2
      displayName: Build docker image for ComplianceWebApi and push to Azure container registry
      inputs:
        azureSubscription: 'masterconnection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: "echo \"Build docker image for ComplianceWebApi and push to Azure container registry\"\necho \"Login to Azure Container Registry\"\naccessToken=$(az acr login --name $(registry) --expose-token --output tsv --query accessToken)\ndocker login $(registry) --username 00000000-0000-0000-0000-000000000000 --password $accessToken\n\necho \"Building Images with Tag '${imageName}:${tag}'\"\ndocker build -t $(registry)/$(imageName):$(tag) -f ./src/WebApis/ComplianceWebApi/Dockerfile .\n\necho \"Pushing to '$registry'\"\ndocker push $(registry)/$(imageName):$(tag)     \n"
    - task: AzureCLI@2
      displayName: Create container app using the image compliancewebapi
      inputs:
        azureSubscription: 'masterconnection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "Configure Container app for compliancewebapi"
          az deployment group create --resource-group $(resourceGroupName) --template-file 'Infrastructure/Containers/app.bicep' --parameters location=$(location) imageName=$(imageName) tagName=$(tag) containerRegistryName=$(containerRegistryName) acaEnvName=$(acaEnvName) uamiName=$(uamiName) appInsightName=$(appInsightName)
    - task: AzureCLI@2
      inputs:
        azureSubscription: 'masterconnection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          previousRevisionName="$(az containerapp revision list -n $(imageName) -g $(resourceGroupName) --query '[0].name' | tr -d '"')"
          echo $previousRevisionName
          az containerapp revision label add --name $(imageName) --resource-group $(resourceGroupName) --label $(labelblue) --revision $previousRevisionName
    - task: AzureCLI@2
      displayName: "Deploy changes for the APIs to container app with a new label"
      inputs:
        azureSubscription: 'masterconnection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: "previousRevisionName=\"$(az containerapp revision list -n $(imageName) -g $(resourceGroupName) --query '[0].name' | tr -d '\"')\"      \nlatestRevisionName=\"$(imageName)--$(tag)\"\necho $previousRevisionName\necho $latestRevisionName\n      \n#Update Container app with updated API\necho \"Updating the Container APP $(imageName)\"\naz containerapp update --name $(imageName) --resource-group $(resourceGroupName) --image $(containerRegistryName).azurecr.io/$(imageName):$(tag) --revision-suffix $(tag) --set-env-vars REVISION_COMMIT_ID=$(tag)\n\n#give that revision a 'green' label\necho \"Add a Label green $(imageName)\"\naz containerapp revision label add --name $(imageName) --resource-group $(resourceGroupName) --label $(labelgreen) --revision $latestRevisionName\n\n#Test the newly deployed revision\necho \"Test the newly deployed revision can be tested by using the Green label-specific FQDN \"\nAPP_DOMAIN=$(az containerapp env show -g $(resourceGroupName) -n $(acaEnvName) --query properties.defaultDomain -o tsv | tr -d '\\r\\n')\n\necho \"Invoking https://$(imageName)---$(labelgreen).$APP_DOMAIN/health\"\nstatus_code=$(curl --write-out %{http_code} --silent --output /dev/null \"https://$(imageName)---$(labelgreen).$APP_DOMAIN/health/health\")\necho \"status_code: $status_code\"\n\n#Test the green lable FQDN\n# curl -s https://(imageName)---$(labelgreen).$APP_DOMAIN/api/env | jq | grep COMMIT\n\n#Test the green lable FQDN      \n\nif [[ \"$status_code\" -ne 200 ]] ; then\n  echo \"Site status changed to - failure to establish a connection to the app\" \n\n  #Swapping lable Blue\n  echo \"Swapping lable Blue to the $previousRevisionName revision\"\n  az containerapp revision label add --name $(imageName) --resource-group $(resourceGroupName) --label $(labelblue) --revision $previousRevisionName -y       \n\n  echo \"Deactivating the Green revision $(imageName)--$(tag) \"\n  az containerapp revision deactivate -g $(resourceGroupName) --revision $(imageName)--$(tag)\n\n  echo \"Restoring traffic 100% to older revision - $previousRevisionName\"\n  az containerapp ingress traffic set -n $(imageName) -g $(resourceGroupName) --revision-weight $previousRevisionName=100\n\n  # latestfqdn=$(az containerapp revision show -n $(imageName) -g $(resourceGroupName) --revision $(imageName)--$(tag) --query fqdn -o tsv)\nelse\n  echo \"Restoring traffic 100% to the new revision - $latestRevisionName\"\n  az containerapp ingress traffic set -n $(imageName) -g $(resourceGroupName) --revision-weight $latestRevisionName=100\n  exit 0\nfi\n"
    - task: AzureCLI@2
      inputs:
        azureSubscription: 'masterconnection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: "echo \"Updating API products...\"\necho \"Deploying products Bicep file...\"\naz deployment group create --resource-group $(resourceGroupName) --template-file 'Infrastructure/API-Products/products.bicep' --parameters apimServiceName=$(apimServiceName) productName=$(productName) envrionmentName=$(acaEnvName) containerAppName=$(imageName) apiName=$(apiName) apiVersion=$(apiVersion) apiRevision=$(apiRevision)\n\n  \n\n\n\n\n\n\n\n\n\n\n\n\n      \n\n\n\n\n \n"

