trigger: none

stages:
- stage: deploy_infra_dev
  jobs:
  - job: deploy_infra_dev
    pool:
      vmImage: ubuntu-latest
    variables:
    - group: apim-variables-dev  
    steps:
    # - task: AzureCLI@2
    #   displayName: Create Core Infrastructure
    #   inputs:
    #     azureSubscription: 'masterconnection'
    #     scriptType: 'bash'
    #     scriptLocation: 'inlineScript'
    #     inlineScript: |
    #       echo "Create core infrastructure" 
    #       az group create --name $(resourceGroupName) --location $(location)
    #       az deployment group create --resource-group $(resourceGroupName) --template-file 'Infrastructure/Platform/main.bicep' --parameters 'Infrastructure/Platform/main.bicepparam' appname=$(APP_NAME) appEnv=$(APP_ENV)
    #   env:
    #     appname: $(APP_NAME)
    #     appEnv: $(APP_ENV)      

    - task: AzureCLI@2
      displayName: Build docker image for ComplianceWebApi and push to Azure container registry
      inputs:
        azureSubscription: 'masterconnection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "Build docker image for ComplianceWebApi and push to Azure container registry"
          echo "Login to Azure Container Registry"
          accessToken=$(az acr login --name $(registry) --expose-token --output tsv --query accessToken)
          docker login $(registry) --username 00000000-0000-0000-0000-000000000000 --password $accessToken
          
          echo "Building Images with Tag '${imageName}:${tag}'"
          docker build -t $(registry)/$(imageName):$(tag) -f ./apis/CognitiveDemo/JobListener/Dockerfile ./apis/CognitiveDemo/JobListener
          
          echo "Pushing to '$registry'"
          docker push $(registry)/$(imageName):$(tag)

    - task: AzureCLI@2
      displayName: Create container app using the image compliancewebapi
      inputs:
        azureSubscription: 'masterconnection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |      
          echo "Configure Container app for compliancewebapi"
          az deployment group create --resource-group $(resourceGroupName) --template-file 'Infrastructure/Containers/app.bicep' --parameters location=$(location) imageName=$(imageName) tagName=$(tag) containerRegistryName=$(containerRegistryName) acaEnvName=$(acaEnvName) uamiName=$(uamiName) appInsightName=$(appInsightName)
    
    - task: AzureCLI@2
      inputs:
        azureSubscription: 'masterconnection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "Updating API products..."
          echo "Deploying products Bicep file..."
          az deployment group create --resource-group $(resourceGroupName) --template-file 'Infrastructure/API-Products/products.bicep' --parameters apimServiceName=$(apimServiceName) productName=$(productName) envrionmentName=$(acaEnvName) containerAppName=$(imageName) apiName=$(apiName)
- stage: deploy_infra_qa
  jobs:
  - job: deploy_infra_qa
    pool:
      vmImage: ubuntu-latest
    variables:
    - group: apim-variables-qa  
    steps:
    - task: AzureCLI@2
      displayName: Create Core Infrastructure
      inputs:
        azureSubscription: 'masterconnection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "Create core infrastructure" 
          az group create --name $(resourceGroupName) --location $(location)
          az deployment group create --resource-group $(resourceGroupName) --template-file 'Infrastructure/Platform/main.bicep' --parameters 'Infrastructure/Platform/main.bicepparam' appname=$(APP_NAME) appEnv=$(APP_ENV)
      env:
        appname: $(APP_NAME)
        appEnv: $(APP_ENV)      

    - task: AzureCLI@2
      displayName: Build docker image for ComplianceWebApi and push to Azure container registry
      inputs:
        azureSubscription: 'masterconnection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "Build docker image for ComplianceWebApi and push to Azure container registry"
          echo "Login to Azure Container Registry"
          accessToken=$(az acr login --name $(registry) --expose-token --output tsv --query accessToken)
          docker login $(registry) --username 00000000-0000-0000-0000-000000000000 --password $accessToken
          
          echo "Building Images with Tag '${imageName}:${tag}'"
          docker build -t $(registry)/$(imageName):$(tag) -f ./apis/CognitiveDemo/JobListener/Dockerfile ./apis/CognitiveDemo/JobListener
          
          echo "Pushing to '$registry'"
          docker push $(registry)/$(imageName):$(tag)

    - task: AzureCLI@2
      displayName: Create container app using the image compliancewebapi
      inputs:
        azureSubscription: 'masterconnection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |      
          echo "Configure Container app for compliancewebapi"
          az deployment group create --resource-group $(resourceGroupName) --template-file 'Infrastructure/Containers/app.bicep' --parameters location=$(location) imageName=$(imageName) tagName=$(tag) containerRegistryName=$(containerRegistryName) acaEnvName=$(acaEnvName) uamiName=$(uamiName) appInsightName=$(appInsightName)
    
    - task: AzureCLI@2
      inputs:
        azureSubscription: 'masterconnection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "Updating API products..."
          echo "Deploying products Bicep file..."
          az deployment group create --resource-group $(resourceGroupName) --template-file 'Infrastructure/API-Products/products.bicep' --parameters apimServiceName=$(apimServiceName) productName=$(productName) envrionmentName=$(acaEnvName) containerAppName=$(imageName) apiName=$(apiName)
- stage: deploy_infra_prod
  jobs:
  - job: deploy_infra_prod
    pool:
      vmImage: ubuntu-latest
    variables:
    - group: apim-variables-prod  
    steps:
    - task: AzureCLI@2
      displayName: Create Core Infrastructure
      inputs:
        azureSubscription: 'masterconnection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "Create core infrastructure" 
          az group create --name $(resourceGroupName) --location $(location)
          az deployment group create --resource-group $(resourceGroupName) --template-file 'Infrastructure/Platform/main.bicep' --parameters 'Infrastructure/Platform/main.bicepparam' appname=$(APP_NAME) appEnv=$(APP_ENV)
      env:
        appname: $(APP_NAME)
        appEnv: $(APP_ENV)      

    - task: AzureCLI@2
      displayName: Build docker image for ComplianceWebApi and push to Azure container registry
      inputs:
        azureSubscription: 'masterconnection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "Build docker image for ComplianceWebApi and push to Azure container registry"
          echo "Login to Azure Container Registry"
          accessToken=$(az acr login --name $(registry) --expose-token --output tsv --query accessToken)
          docker login $(registry) --username 00000000-0000-0000-0000-000000000000 --password $accessToken
          
          echo "Building Images with Tag '${imageName}:${tag}'"
          docker build -t $(registry)/$(imageName):$(tag) -f ./apis/CognitiveDemo/JobListener/Dockerfile ./apis/CognitiveDemo/JobListener
          
          echo "Pushing to '$registry'"
          docker push $(registry)/$(imageName):$(tag)

    - task: AzureCLI@2
      displayName: Create container app using the image compliancewebapi
      inputs:
        azureSubscription: 'masterconnection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |      
          echo "Configure Container app for compliancewebapi"
          az deployment group create --resource-group $(resourceGroupName) --template-file 'Infrastructure/Containers/app.bicep' --parameters location=$(location) imageName=$(imageName) tagName=$(tag) containerRegistryName=$(containerRegistryName) acaEnvName=$(acaEnvName) uamiName=$(uamiName) appInsightName=$(appInsightName)
    
    - task: AzureCLI@2
      inputs:
        azureSubscription: 'masterconnection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "Updating API products..."
          echo "Deploying products Bicep file..."
          az deployment group create --resource-group $(resourceGroupName) --template-file 'Infrastructure/API-Products/products.bicep' --parameters apimServiceName=$(apimServiceName) productName=$(productName) envrionmentName=$(acaEnvName) containerAppName=$(imageName) apiName=$(apiName)
